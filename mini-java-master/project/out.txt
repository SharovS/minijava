class Factorial { 
   public static Void main ( String [] a ) { 
       System.out.println ( new Fac (). ComputeFac ( 0 , 100  ) ) ;
   }
}

class Fac { 
    public int ComputeFac ( int from , int to ) { 
        int res = 1;
        while ( from < to )
            {
                res = from - from / 2 * 2;
                if ( 0 < res )
                    res = res;
                else
                    System.out.println ( from ) ;
            }

        return res;
    }

}


-------------------------------------------

Unfounded method: ComputeFac
Factorial



void main
(
string a
)


_________
Fac



int ComputeFac
(
int from
int to
)
int res


_________


------------Type cheking completed-----------

-----------CODE BEFORE CANONIZING--------------
FacComputeFac
ESEQ(SEQ(MOVE(TEMP(T1), 
    CONST(1)), 
    SEQ(SEQ( L3, 
        CJUMP( < , MEM(BINOP( + , TEMP(fp), 
            CONST(5))), 
            MEM(BINOP( + , TEMP(fp), 
                CONST(1))), 
            L4, 
            L5)), 
        SEQ(SEQ( L4, 
            SEQ(MOVE(TEMP(T1), 
                BINOP( - , MEM(BINOP( + , TEMP(fp), 
                    CONST(5))), 
                    BINOP( * , BINOP( / , MEM(BINOP( + , TEMP(fp), 
                        CONST(5))), 
                        CONST(2)), 
                        CONST(2)))), 
                SEQ(CJUMP( < , CONST(0), 
                    TEMP(T1), 
                    L0, 
                    L1), 
                    SEQ(SEQ(SEQ( L0, 
                        MOVE(TEMP(T1), 
                            TEMP(T1))), 
                        JUMP(L2, 
                            )), 
                        SEQ(SEQ( L1, 
                            EXP(CALL(NAME(system.out.println), 
                                MEM(BINOP( + , TEMP(fp), 
                                    CONST(5)))))), 
                             L2))))), 
            SEQ(JUMP(L3, 
                ), 
                 L5)))), 
    TEMP(T1))
--------------CANONIZING FINISHED-----------------

--------------------BLOCK-------------------------
 L7MOVE(TEMP(T1), 
    CONST(1))JUMP(L3, 
    )
----------------END OF BLOCK----------------

--------------------BLOCK-------------------------
 L3CJUMP( < , MEM(BINOP( + , TEMP(fp), 
    CONST(5))), 
    MEM(BINOP( + , TEMP(fp), 
        CONST(1))), 
    L4, 
    L5)
----------------END OF BLOCK----------------

--------------------BLOCK-------------------------
 L4MOVE(TEMP(T1), 
    BINOP( - , MEM(BINOP( + , TEMP(fp), 
        CONST(5))), 
        BINOP( * , BINOP( / , MEM(BINOP( + , TEMP(fp), 
            CONST(5))), 
            CONST(2)), 
            CONST(2))))CJUMP( < , CONST(0), 
    TEMP(T1), 
    L0, 
    L1)
----------------END OF BLOCK----------------

--------------------BLOCK-------------------------
 L0MOVE(TEMP(T1), 
    TEMP(T1))JUMP(L2, 
    )
----------------END OF BLOCK----------------

--------------------BLOCK-------------------------
 L1EXP(CALL(NAME(system.out.println), 
    MEM(BINOP( + , TEMP(fp), 
        CONST(5)))))JUMP(L2, 
    )
----------------END OF BLOCK----------------

--------------------BLOCK-------------------------
 L2JUMP(L3, 
    )
----------------END OF BLOCK----------------

--------------------BLOCK-------------------------
 L5JUMP(L6, 
    )
----------------END OF BLOCK----------------
 L7MOVE(TEMP(T1), 
    CONST(1))JUMP(L3, 
    ) L3CJUMP( < , MEM(BINOP( + , TEMP(fp), 
    CONST(5))), 
    MEM(BINOP( + , TEMP(fp), 
        CONST(1))), 
    L4, 
    L5) L5JUMP(L6, 
    ) L4MOVE(TEMP(T1), 
    BINOP( - , MEM(BINOP( + , TEMP(fp), 
        CONST(5))), 
        BINOP( * , BINOP( / , MEM(BINOP( + , TEMP(fp), 
            CONST(5))), 
            CONST(2)), 
            CONST(2))))CJUMP( < , CONST(0), 
    TEMP(T1), 
    L0, 
    L1) L1EXP(CALL(NAME(system.out.println), 
    MEM(BINOP( + , TEMP(fp), 
        CONST(5)))))JUMP(L2, 
    ) L2JUMP(L3, 
    ) L0MOVE(TEMP(T1), 
    TEMP(T1))JUMP(L2, 
    ) L6
--------------CANONIZING CODE END------------

----------------ASSEMBLER CODE---------------------
L7:
ADDI T2 <- 'r0+1
ADD T1 <- T2 + r0
L3:
LOAD T5 <- M[fp+1]
LOAD T6 <- M[fp+5]
SUB T4 <- T6-T5
ADD T3 <- T4 + r0
CJmpLT T3 L4
L5:
JMP L6
L4:
ADDI T9 <- 'r0+2
ADDI T11 <- 'r0+2
DIV T10 <- T6/T11
MUL T8 <- T10*T9
SUB T7 <- T6-T8
ADD T1 <- T7 + r0
SUBI T13 <- T1-0
ADD T12 <- T13 + r0
CJmpLT T12 L0
L1:
ADD T14 <- T6 + r0
CALL system.out.println
L2:
JMP L3
L0:
ADD T1 <- T1 + r0
JMP L2
L6:
MOVE rv <- T1

----------------ASSEMBLER CODE FINISHED-------------------

-----------CODE BEFORE CANONIZING--------------
main
ESEQ(EXP(CALL(NAME(system.out.println), 
    CALL(NAME(ComputeFac), 
        CONST(100)CONST(0)ESEQ(SEQ(MOVE(TEMP(T0), 
            CALL(NAME(initClass), 
                BINOP( * , CONST(1), 
                    CONST(4)))), 
            MOVE(TEMP(T0), 
                BINOP( * , CONST(1), 
                    CONST(4)))), 
            TEMP(T0))))), 
    CONST(0))
--------------CANONIZING FINISHED-----------------

--------------------BLOCK-------------------------
 L9MOVE(TEMP(T0), 
    CALL(NAME(initClass), 
        BINOP( * , CONST(1), 
            CONST(4))))MOVE(TEMP(T0), 
    BINOP( * , CONST(1), 
        CONST(4)))MOVE(TEMP(T15), 
    CALL(NAME(ComputeFac), 
        CONST(100)CONST(0)TEMP(T0)))EXP(CALL(NAME(system.out.println), 
    TEMP(T15)))JUMP(L8, 
    )
----------------END OF BLOCK----------------
 L9MOVE(TEMP(T0), 
    CALL(NAME(initClass), 
        BINOP( * , CONST(1), 
            CONST(4))))MOVE(TEMP(T0), 
    BINOP( * , CONST(1), 
        CONST(4)))MOVE(TEMP(T15), 
    CALL(NAME(ComputeFac), 
        CONST(100)CONST(0)TEMP(T0)))EXP(CALL(NAME(system.out.println), 
    TEMP(T15)))JUMP(L8, 
    ) L8
--------------CANONIZING CODE END------------

----------------ASSEMBLER CODE---------------------
L9:
ADDI T18 <- 'r0+4
ADDI T19 <- 'r0+1
MUL T17 <- T19*T18
ADD T16 <- T17 + r0
CALL initClass
ADD T0 <- 'r0 + rv
ADDI T21 <- 'r0+4
ADDI T22 <- 'r0+1
MUL T20 <- T22*T21
ADD T0 <- T20 + r0
ADDI T24 <- 'r0+100
ADD T23 <- T24 + r0
ADDI T26 <- 'r0+0
ADD T25 <- T26 + r0
ADD T27 <- T0 + r0
CALL ComputeFac
ADD T15 <- 'r0 + rv
ADD T28 <- T15 + r0
CALL system.out.println
L8:
ADDI T29 <- 'r0+0
MOVE rv <- T29

----------------ASSEMBLER CODE FINISHED-------------------
Для продолжения нажмите любую клавишу . . . 
